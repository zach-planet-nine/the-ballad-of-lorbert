using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Cryptography.ECDSA;
using System.Text;

public class NineumManager : MonoBehaviour
{
    public static NineumManager manager;
    private List<string> Nineum = new List<string>();
    private User user;
    private NetworkManager nm;

    private void Awake()
    {
        /*string userJSON = "{\"userId\":2,\"name\":\"beer - foo - beer\",\"locationId\":5,\"powerId\":13,\"powerOrdinal\":6,\"power\":0,\"lastPowerUsed\":\"2018 - 08 - 18T00: 17:40.019Z\",\"powerRegenerationRate\":1.666667,\"globalRegenerationRate\":1.666667,\"moveOrdinal\":10,\"lastMove\":\"2018 - 08 - 18T00: 38:52.609Z\",\"publicKey\":\"0277cf1e4adc7b4de93a9a3cd447b8b2a824f7da9b35c697cc2a1f7c6338694302\",\"publicKeySuspended\":false,\"keys\":{},\"location\":\"5\",\"exits\":{\"north\":2,\"south\":8,\"east\":14,\"west\":23,\"up\":6,\"down\":4},\"nineum\":[\"01000000010102030405060100000001\",\"01000000010101030108040100000001\",\"01000000010105030107070100000001\",\"01000000010201010406020100000001\",\"01000000010105040708060100000001\",\"01000000010102040506020100000001\",\"01000000010202090601010100000001\",\"01000000010202050401010100000001\",\"01000000010102020803020100000001\",\"01000000010206010208050100000001\",\"01000000010202020107080100000001\",\"01000000010104040603050100000001\"],\"currentPower\":2148,\"nextMove\":\"2019 - 11 - 12T17: 41:04.433Z\"}";

        User user = JsonUtility.FromJson<User>(userJSON);

        Debug.Log("The user has " + user.nineum.Count + " Nineum.");

        string signature = CryptoManager.signMessage("This is a message");

        Debug.Log(signature);*/

        //Nineum = new List<string> {};

        /*AddNineum("01000000010201010102030100000001");
        AddNineum("01000000010201010102060100000001");
        AddNineum("01000000010203010104080100000001");*/

        if (manager == null)
        {
            manager = this;
            DontDestroyOnLoad(gameObject);
        } else if(this != manager)
        {
            Destroy(gameObject);
        }
    }

    private void Start()
    {
        nm = GetComponent<NetworkManager>();
    }

    public void AddNineum(string ninea)
    {
        Nineum.Add(ninea);
        CharacterStats.characterStats.Nineum = Nineum;
    }

    public string GetNineumForEquipLocationAtIndex(EquipLocations location, int index)
    {
        return Nineum[0];
    }

    public List<string> GetNineum()
    {
        return Nineum;
    }

    public void ConnectUser(int userId)
    {
        Debug.Log("Connecting user");
        //RefreshNineum(userId);
    }

    /*public void RefreshNineum(int userId)
    {
        GatewayTimestampTuple gateway = new GatewayTimestampTuple("TheBalladOfLorbertTest");
        GatewayTimestampTupleWithSignature gatewayWithSignature = new GatewayTimestampTupleWithSignature(gateway, CryptoManager.signMessage(JsonUtility.ToJson(gateway)));

        Debug.Log("Refreshing user");

        

        nm.RefreshUser(userId, gatewayWithSignature, (err, resp) =>
        {
            if(err != null)
            {
                Debug.Log("ERRORRRORORRR!!!");
                Debug.Log(err);
                return;
            }
            user = JsonUtility.FromJson<User>(resp);
            Nineum = user.nineum;
            CharacterStats.characterStats.Nineum = Nineum;
            CharacterStats.characterStats.partyData.user = user;
            PlayerPrefs.SetInt("userId", user.userId);
        });
    }*/

    public void RefreshNineum(List<string> nineum)
    {
        Nineum = nineum;
    }

}

[Serializable]
public class User
{
    public int userId;
    public string name;
    public int locationId;
    public int powerId;
    public int powerOrdinal;
    public int power;
    public string lastPowerUsed;
    public float powerRegenerationRate;
    public float globalRegenerationRate;
    public int moveOrdinal;
    public string lastMove;
    public string publicKey;
    public Dictionary<string, string> keys;
    public int location;
    public Dictionary<string, int> exits;
    public List<string> nineum;
    public int currentPower;
    public string nextMove;
}
